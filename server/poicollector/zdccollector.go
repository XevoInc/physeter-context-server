package poicollector

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	pbContext "xevo/physeter-context-server/proto"
	"xevo/physeter-context-server/server/types"

	"github.com/gomodule/oauth1/oauth"
)

// for ZDC API
const (
	clientKey    = "JSZca1774e9e2ee|KpqXZ"
	clientSecret = "EsnHo8dA4MEkZzeAIm-02TceFn0"
	apiEndpoint  = "https://test.core.its-mo.com/zmaps/api/apicore/core/v1_0/poi/latlon"
)

var credential = oauth.Credentials{
	Token:  clientKey,
	Secret: clientSecret,
}
var oauthClient = oauth.Client{
	Credentials: credential,
	Header:      http.Header{"Accept": {"application/json"}},
}

type ZdcCollector struct {
}

var _ types.PoiCollector = (*ZdcCollector)(nil)

// ZdcAPIResponse is response object of latlon search result. This type is auto-generated by https://mholt.github.io/json-to-go/
type ZdcAPIResponse struct {
	Status struct {
		Code string `json:"code"`
		Text string `json:"text"`
	} `json:"status"`
	Info struct {
		Hit int `json:"hit"`
	} `json:"info"`
	Item []struct {
		Poi struct {
			Text  string `json:"text"`
			Code  string `json:"code"`
			Point struct {
				Lat float64 `json:"lat"`
				Lon float64 `json:"lon"`
			} `json:"point"`
			Kana        string `json:"kana"`
			AddressText string `json:"addressText"`
			Zipcode     string `json:"zipcode"`
			PhoneNumber string `json:"phoneNumber"`
			Genre       struct {
				Code string `json:"code"`
				Text string `json:"text"`
			} `json:"genre"`
			// Detail      interface{} `json:"detail"`
			// Language    interface{} `json:"language"`
			ArrivalInfo []struct {
				Text     string `json:"text"`
				Kana     string `json:"kana"`
				Exittype struct {
					Code string `json:"code"`
					Text string `json:"text"`
				} `json:"exittype"`
				Arrivalpoint struct {
					Lat float64 `json:"lat"`
					Lon float64 `json:"lon"`
				} `json:"arrivalpoint"`
				Exitpoint struct {
					Lat float64 `json:"lat"`
					Lon float64 `json:"lon"`
				} `json:"exitpoint"`
			} `json:"arrivalInfo"`
		} `json:"poi"`
		Distance int `json:"distance"`
	} `json:"item"`
}

func (c *ZdcCollector) Name() string {
	return "ZdcCollector"
}

func (c *ZdcCollector) Collect(req *pbContext.GetRecommendsRequest) ([]*pbContext.PointOfInterest, error) {
	err := validateRequest(req)
	if err != nil {
		return nil, err
	}

	var location = req.CarState.CurrentLocation
	resp, err := getAPIResponse(location.Latitude, location.Longitude)
	if err != nil {
		return nil, err
	}
	pois := convertToPois(resp)
	return pois, nil
}

func validateRequest(req *pbContext.GetRecommendsRequest) error {
	if req == nil {
		return fmt.Errorf("Request object must not be nil")
	}
	if req.CarState == nil || req.CarState.CurrentLocation == nil {
		return fmt.Errorf("The car location is required")
	}
	return nil
}

func getAPIResponse(latitude float64, longitude float64) (*ZdcAPIResponse, error) {
	qs := url.Values{
		"if_clientid":  {clientKey},
		"if_auth_type": {"oauth"},
		"latlon":       {fmt.Sprintf("%f,%f", latitude, longitude)},
		"limit":        {"100"},
		"datum":        {"WGS84"},
	}
	resp, err := oauthClient.Get(nil, nil, apiEndpoint, qs)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		p, _ := ioutil.ReadAll(resp.Body)
		return nil, fmt.Errorf("get %s returned status %d, %s", resp.Request.URL, resp.StatusCode, p)
	}

	var result ZdcAPIResponse
	err = json.NewDecoder(resp.Body).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

func convertToPois(resp *ZdcAPIResponse) []*pbContext.PointOfInterest {
	if resp == nil || resp.Status.Code != "0000" {
		return nil
	}

	// fmt.Println("Success to get the ZDC API. count=", resp.Info.Hit)
	result := make([]*pbContext.PointOfInterest, 0, 10)
	var items = resp.Item
	for _, item := range items {
		var poi = item.Poi
		categories := convertToPoiCategory(poi.Genre.Code)
		if len(categories) == 0 {
			continue
		}
		p := pbContext.PointOfInterest{
			Name: poi.Text,
			Coordinates: &pbContext.GeoCoordinates{
				Location: &pbContext.Coordinates{
					Latitude:  poi.Point.Lat,
					Longitude: poi.Point.Lon,
				},
				Address:        poi.AddressText,
				AddressCountry: "JP",
				PostalCode:     poi.Zipcode,
			},
			Categories: categories,
			Distance:   float64(item.Distance),
		}
		result = append(result, &p)
	}
	return result
}
func convertToPoiCategory(genrecode string) []pbContext.PointOfInterest_Category {
	switch genrecode {
	case "0011000110":
		return []pbContext.PointOfInterest_Category{pbContext.PARKING}
	case "0011000130":
		return []pbContext.PointOfInterest_Category{pbContext.GAS_STATION}
	case "0014000180":
		return []pbContext.PointOfInterest_Category{pbContext.CAFE}
	case "0024000110":
		return []pbContext.PointOfInterest_Category{pbContext.CAFE}
	case "0024000120", "0024000130", "0024000140":
		return []pbContext.PointOfInterest_Category{pbContext.RESTAURANT}
	}
	switch genrecode[0:5] {
	case "00140":
		return []pbContext.PointOfInterest_Category{pbContext.GROCERY}
	case "00250":
		return []pbContext.PointOfInterest_Category{pbContext.SCHOOL}
	}
	return []pbContext.PointOfInterest_Category{}
}
