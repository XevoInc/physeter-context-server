// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: context.proto

/*
	Package context_v1 is a generated protocol buffer package.

	It is generated from these files:
		context.proto

	It has these top-level messages:
		GetRecommendsRequest
		GetRecommendsResponse
		UserState
		CarState
		Coordinates
		GeoCoordinates
		PointOfInterest
*/
package context_v1

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PointOfInterest_Category int32

const (
	UNKNOWN     PointOfInterest_Category = 0
	GAS_STATION PointOfInterest_Category = 1
	PARKING     PointOfInterest_Category = 2
	SCHOOL      PointOfInterest_Category = 3
	GROCERY     PointOfInterest_Category = 4
	CAFE        PointOfInterest_Category = 5
	RESTAURANT  PointOfInterest_Category = 6
)

var PointOfInterest_Category_name = map[int32]string{
	0: "UNKNOWN",
	1: "GAS_STATION",
	2: "PARKING",
	3: "SCHOOL",
	4: "GROCERY",
	5: "CAFE",
	6: "RESTAURANT",
}
var PointOfInterest_Category_value = map[string]int32{
	"UNKNOWN":     0,
	"GAS_STATION": 1,
	"PARKING":     2,
	"SCHOOL":      3,
	"GROCERY":     4,
	"CAFE":        5,
	"RESTAURANT":  6,
}

func (PointOfInterest_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContext, []int{6, 0}
}

type GetRecommendsRequest struct {
	UserState *UserState                 `protobuf:"bytes,1,opt,name=user_state,json=userState" json:"user_state,omitempty"`
	CarState  *CarState                  `protobuf:"bytes,2,opt,name=car_state,json=carState" json:"car_state,omitempty"`
	Time      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Limit     int32                      `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetRecommendsRequest) Reset()                    { *m = GetRecommendsRequest{} }
func (*GetRecommendsRequest) ProtoMessage()               {}
func (*GetRecommendsRequest) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{0} }

func (m *GetRecommendsRequest) GetUserState() *UserState {
	if m != nil {
		return m.UserState
	}
	return nil
}

func (m *GetRecommendsRequest) GetCarState() *CarState {
	if m != nil {
		return m.CarState
	}
	return nil
}

func (m *GetRecommendsRequest) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *GetRecommendsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (*GetRecommendsRequest) XXX_MessageName() string {
	return "context.v1.GetRecommendsRequest"
}

type GetRecommendsResponse struct {
	Recommends []*PointOfInterest `protobuf:"bytes,1,rep,name=recommends" json:"recommends,omitempty"`
}

func (m *GetRecommendsResponse) Reset()                    { *m = GetRecommendsResponse{} }
func (*GetRecommendsResponse) ProtoMessage()               {}
func (*GetRecommendsResponse) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{1} }

func (m *GetRecommendsResponse) GetRecommends() []*PointOfInterest {
	if m != nil {
		return m.Recommends
	}
	return nil
}

func (*GetRecommendsResponse) XXX_MessageName() string {
	return "context.v1.GetRecommendsResponse"
}

type UserState struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *UserState) Reset()                    { *m = UserState{} }
func (*UserState) ProtoMessage()               {}
func (*UserState) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{2} }

func (m *UserState) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserState) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (*UserState) XXX_MessageName() string {
	return "context.v1.UserState"
}

type CarState struct {
	CarId           string       `protobuf:"bytes,1,opt,name=car_id,json=carId,proto3" json:"car_id,omitempty"`
	CurrentLocation *Coordinates `protobuf:"bytes,2,opt,name=current_location,json=currentLocation" json:"current_location,omitempty"`
	Destination     *Coordinates `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	// Percentage from 0 to 100 percent
	FuelLevelPercentage float32 `protobuf:"fixed32,4,opt,name=fuel_level_percentage,json=fuelLevelPercentage,proto3" json:"fuel_level_percentage,omitempty"`
	// Remaining range in miles
	RangeM             float32 `protobuf:"fixed32,5,opt,name=range_m,json=rangeM,proto3" json:"range_m,omitempty"`
	NumberOfPassengers int32   `protobuf:"varint,6,opt,name=number_of_passengers,json=numberOfPassengers,proto3" json:"number_of_passengers,omitempty"`
	HeadingDeg         float32 `protobuf:"fixed32,7,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"`
	SpeedMph           float32 `protobuf:"fixed32,8,opt,name=speed_mph,json=speedMph,proto3" json:"speed_mph,omitempty"`
	IsInPark           bool    `protobuf:"varint,9,opt,name=is_in_park,json=isInPark,proto3" json:"is_in_park,omitempty"`
	IsSimulator        bool    `protobuf:"varint,15,opt,name=is_simulator,json=isSimulator,proto3" json:"is_simulator,omitempty"`
}

func (m *CarState) Reset()                    { *m = CarState{} }
func (*CarState) ProtoMessage()               {}
func (*CarState) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{3} }

func (m *CarState) GetCarId() string {
	if m != nil {
		return m.CarId
	}
	return ""
}

func (m *CarState) GetCurrentLocation() *Coordinates {
	if m != nil {
		return m.CurrentLocation
	}
	return nil
}

func (m *CarState) GetDestination() *Coordinates {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *CarState) GetFuelLevelPercentage() float32 {
	if m != nil {
		return m.FuelLevelPercentage
	}
	return 0
}

func (m *CarState) GetRangeM() float32 {
	if m != nil {
		return m.RangeM
	}
	return 0
}

func (m *CarState) GetNumberOfPassengers() int32 {
	if m != nil {
		return m.NumberOfPassengers
	}
	return 0
}

func (m *CarState) GetHeadingDeg() float32 {
	if m != nil {
		return m.HeadingDeg
	}
	return 0
}

func (m *CarState) GetSpeedMph() float32 {
	if m != nil {
		return m.SpeedMph
	}
	return 0
}

func (m *CarState) GetIsInPark() bool {
	if m != nil {
		return m.IsInPark
	}
	return false
}

func (m *CarState) GetIsSimulator() bool {
	if m != nil {
		return m.IsSimulator
	}
	return false
}

func (*CarState) XXX_MessageName() string {
	return "context.v1.CarState"
}

type Coordinates struct {
	Latitude         float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude        float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude         float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Accuracy         float64 `protobuf:"fixed64,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	AltitudeAccuracy float64 `protobuf:"fixed64,5,opt,name=altitudeAccuracy,proto3" json:"altitudeAccuracy,omitempty"`
}

func (m *Coordinates) Reset()                    { *m = Coordinates{} }
func (*Coordinates) ProtoMessage()               {}
func (*Coordinates) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{4} }

func (m *Coordinates) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Coordinates) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Coordinates) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *Coordinates) GetAccuracy() float64 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Coordinates) GetAltitudeAccuracy() float64 {
	if m != nil {
		return m.AltitudeAccuracy
	}
	return 0
}

func (*Coordinates) XXX_MessageName() string {
	return "context.v1.Coordinates"
}

type GeoCoordinates struct {
	Location       *Coordinates `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Address        string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AddressCountry string       `protobuf:"bytes,3,opt,name=addressCountry,proto3" json:"addressCountry,omitempty"`
	PostalCode     string       `protobuf:"bytes,4,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
}

func (m *GeoCoordinates) Reset()                    { *m = GeoCoordinates{} }
func (*GeoCoordinates) ProtoMessage()               {}
func (*GeoCoordinates) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{5} }

func (m *GeoCoordinates) GetLocation() *Coordinates {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GeoCoordinates) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GeoCoordinates) GetAddressCountry() string {
	if m != nil {
		return m.AddressCountry
	}
	return ""
}

func (m *GeoCoordinates) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (*GeoCoordinates) XXX_MessageName() string {
	return "context.v1.GeoCoordinates"
}

type PointOfInterest struct {
	Name        string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coordinates *GeoCoordinates            `protobuf:"bytes,2,opt,name=coordinates" json:"coordinates,omitempty"`
	Categories  []PointOfInterest_Category `protobuf:"varint,3,rep,packed,name=categories,enum=context.v1.PointOfInterest_Category" json:"categories,omitempty"`
	Distance    float64                    `protobuf:"fixed64,4,opt,name=distance,proto3" json:"distance,omitempty"`
	Score       float64                    `protobuf:"fixed64,15,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *PointOfInterest) Reset()                    { *m = PointOfInterest{} }
func (*PointOfInterest) ProtoMessage()               {}
func (*PointOfInterest) Descriptor() ([]byte, []int) { return fileDescriptorContext, []int{6} }

func (m *PointOfInterest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PointOfInterest) GetCoordinates() *GeoCoordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *PointOfInterest) GetCategories() []PointOfInterest_Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *PointOfInterest) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *PointOfInterest) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (*PointOfInterest) XXX_MessageName() string {
	return "context.v1.PointOfInterest"
}
func init() {
	proto.RegisterType((*GetRecommendsRequest)(nil), "context.v1.GetRecommendsRequest")
	golang_proto.RegisterType((*GetRecommendsRequest)(nil), "context.v1.GetRecommendsRequest")
	proto.RegisterType((*GetRecommendsResponse)(nil), "context.v1.GetRecommendsResponse")
	golang_proto.RegisterType((*GetRecommendsResponse)(nil), "context.v1.GetRecommendsResponse")
	proto.RegisterType((*UserState)(nil), "context.v1.UserState")
	golang_proto.RegisterType((*UserState)(nil), "context.v1.UserState")
	proto.RegisterType((*CarState)(nil), "context.v1.CarState")
	golang_proto.RegisterType((*CarState)(nil), "context.v1.CarState")
	proto.RegisterType((*Coordinates)(nil), "context.v1.Coordinates")
	golang_proto.RegisterType((*Coordinates)(nil), "context.v1.Coordinates")
	proto.RegisterType((*GeoCoordinates)(nil), "context.v1.GeoCoordinates")
	golang_proto.RegisterType((*GeoCoordinates)(nil), "context.v1.GeoCoordinates")
	proto.RegisterType((*PointOfInterest)(nil), "context.v1.PointOfInterest")
	golang_proto.RegisterType((*PointOfInterest)(nil), "context.v1.PointOfInterest")
	proto.RegisterEnum("context.v1.PointOfInterest_Category", PointOfInterest_Category_name, PointOfInterest_Category_value)
	golang_proto.RegisterEnum("context.v1.PointOfInterest_Category", PointOfInterest_Category_name, PointOfInterest_Category_value)
}
func (x PointOfInterest_Category) String() string {
	s, ok := PointOfInterest_Category_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetRecommendsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecommendsRequest)
	if !ok {
		that2, ok := that.(GetRecommendsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserState.Equal(that1.UserState) {
		return false
	}
	if !this.CarState.Equal(that1.CarState) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *GetRecommendsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecommendsResponse)
	if !ok {
		that2, ok := that.(GetRecommendsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Recommends) != len(that1.Recommends) {
		return false
	}
	for i := range this.Recommends {
		if !this.Recommends[i].Equal(that1.Recommends[i]) {
			return false
		}
	}
	return true
}
func (this *UserState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserState)
	if !ok {
		that2, ok := that.(UserState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *CarState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CarState)
	if !ok {
		that2, ok := that.(CarState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CarId != that1.CarId {
		return false
	}
	if !this.CurrentLocation.Equal(that1.CurrentLocation) {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if this.FuelLevelPercentage != that1.FuelLevelPercentage {
		return false
	}
	if this.RangeM != that1.RangeM {
		return false
	}
	if this.NumberOfPassengers != that1.NumberOfPassengers {
		return false
	}
	if this.HeadingDeg != that1.HeadingDeg {
		return false
	}
	if this.SpeedMph != that1.SpeedMph {
		return false
	}
	if this.IsInPark != that1.IsInPark {
		return false
	}
	if this.IsSimulator != that1.IsSimulator {
		return false
	}
	return true
}
func (this *Coordinates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Coordinates)
	if !ok {
		that2, ok := that.(Coordinates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Altitude != that1.Altitude {
		return false
	}
	if this.Accuracy != that1.Accuracy {
		return false
	}
	if this.AltitudeAccuracy != that1.AltitudeAccuracy {
		return false
	}
	return true
}
func (this *GeoCoordinates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoCoordinates)
	if !ok {
		that2, ok := that.(GeoCoordinates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.AddressCountry != that1.AddressCountry {
		return false
	}
	if this.PostalCode != that1.PostalCode {
		return false
	}
	return true
}
func (this *PointOfInterest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PointOfInterest)
	if !ok {
		that2, ok := that.(PointOfInterest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if len(this.Categories) != len(that1.Categories) {
		return false
	}
	for i := range this.Categories {
		if this.Categories[i] != that1.Categories[i] {
			return false
		}
	}
	if this.Distance != that1.Distance {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *GetRecommendsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&context_v1.GetRecommendsRequest{")
	if this.UserState != nil {
		s = append(s, "UserState: "+fmt.Sprintf("%#v", this.UserState)+",\n")
	}
	if this.CarState != nil {
		s = append(s, "CarState: "+fmt.Sprintf("%#v", this.CarState)+",\n")
	}
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRecommendsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&context_v1.GetRecommendsResponse{")
	if this.Recommends != nil {
		s = append(s, "Recommends: "+fmt.Sprintf("%#v", this.Recommends)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&context_v1.UserState{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&context_v1.CarState{")
	s = append(s, "CarId: "+fmt.Sprintf("%#v", this.CarId)+",\n")
	if this.CurrentLocation != nil {
		s = append(s, "CurrentLocation: "+fmt.Sprintf("%#v", this.CurrentLocation)+",\n")
	}
	if this.Destination != nil {
		s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	}
	s = append(s, "FuelLevelPercentage: "+fmt.Sprintf("%#v", this.FuelLevelPercentage)+",\n")
	s = append(s, "RangeM: "+fmt.Sprintf("%#v", this.RangeM)+",\n")
	s = append(s, "NumberOfPassengers: "+fmt.Sprintf("%#v", this.NumberOfPassengers)+",\n")
	s = append(s, "HeadingDeg: "+fmt.Sprintf("%#v", this.HeadingDeg)+",\n")
	s = append(s, "SpeedMph: "+fmt.Sprintf("%#v", this.SpeedMph)+",\n")
	s = append(s, "IsInPark: "+fmt.Sprintf("%#v", this.IsInPark)+",\n")
	s = append(s, "IsSimulator: "+fmt.Sprintf("%#v", this.IsSimulator)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Coordinates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&context_v1.Coordinates{")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "Altitude: "+fmt.Sprintf("%#v", this.Altitude)+",\n")
	s = append(s, "Accuracy: "+fmt.Sprintf("%#v", this.Accuracy)+",\n")
	s = append(s, "AltitudeAccuracy: "+fmt.Sprintf("%#v", this.AltitudeAccuracy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoCoordinates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&context_v1.GeoCoordinates{")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "AddressCountry: "+fmt.Sprintf("%#v", this.AddressCountry)+",\n")
	s = append(s, "PostalCode: "+fmt.Sprintf("%#v", this.PostalCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PointOfInterest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&context_v1.PointOfInterest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	s = append(s, "Categories: "+fmt.Sprintf("%#v", this.Categories)+",\n")
	s = append(s, "Distance: "+fmt.Sprintf("%#v", this.Distance)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringContext(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContextService service

type ContextServiceClient interface {
	GetRecommends(ctx context.Context, in *GetRecommendsRequest, opts ...grpc.CallOption) (*GetRecommendsResponse, error)
}

type contextServiceClient struct {
	cc *grpc.ClientConn
}

func NewContextServiceClient(cc *grpc.ClientConn) ContextServiceClient {
	return &contextServiceClient{cc}
}

func (c *contextServiceClient) GetRecommends(ctx context.Context, in *GetRecommendsRequest, opts ...grpc.CallOption) (*GetRecommendsResponse, error) {
	out := new(GetRecommendsResponse)
	err := grpc.Invoke(ctx, "/context.v1.ContextService/GetRecommends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContextService service

type ContextServiceServer interface {
	GetRecommends(context.Context, *GetRecommendsRequest) (*GetRecommendsResponse, error)
}

func RegisterContextServiceServer(s *grpc.Server, srv ContextServiceServer) {
	s.RegisterService(&_ContextService_serviceDesc, srv)
}

func _ContextService_GetRecommends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetRecommends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/context.v1.ContextService/GetRecommends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetRecommends(ctx, req.(*GetRecommendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContextService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "context.v1.ContextService",
	HandlerType: (*ContextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommends",
			Handler:    _ContextService_GetRecommends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "context.proto",
}

func (m *GetRecommendsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecommendsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.UserState.Size()))
		n1, err := m.UserState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CarState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.CarState.Size()))
		n2, err := m.CarState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Time != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Time.Size()))
		n3, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Limit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetRecommendsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecommendsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Recommends) > 0 {
		for _, msg := range m.Recommends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintContext(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.SessionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.SessionId)))
		i += copy(dAtA[i:], m.SessionId)
	}
	return i, nil
}

func (m *CarState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.CarId)))
		i += copy(dAtA[i:], m.CarId)
	}
	if m.CurrentLocation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.CurrentLocation.Size()))
		n4, err := m.CurrentLocation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Destination != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Destination.Size()))
		n5, err := m.Destination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.FuelLevelPercentage != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FuelLevelPercentage))))
		i += 4
	}
	if m.RangeM != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RangeM))))
		i += 4
	}
	if m.NumberOfPassengers != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.NumberOfPassengers))
	}
	if m.HeadingDeg != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HeadingDeg))))
		i += 4
	}
	if m.SpeedMph != 0 {
		dAtA[i] = 0x45
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SpeedMph))))
		i += 4
	}
	if m.IsInPark {
		dAtA[i] = 0x48
		i++
		if m.IsInPark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSimulator {
		dAtA[i] = 0x78
		i++
		if m.IsSimulator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Coordinates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coordinates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Altitude))))
		i += 8
	}
	if m.Accuracy != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Accuracy))))
		i += 8
	}
	if m.AltitudeAccuracy != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AltitudeAccuracy))))
		i += 8
	}
	return i, nil
}

func (m *GeoCoordinates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoCoordinates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Location.Size()))
		n6, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.AddressCountry) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.AddressCountry)))
		i += copy(dAtA[i:], m.AddressCountry)
	}
	if len(m.PostalCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.PostalCode)))
		i += copy(dAtA[i:], m.PostalCode)
	}
	return i, nil
}

func (m *PointOfInterest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointOfInterest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Coordinates.Size()))
		n7, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Categories) > 0 {
		dAtA9 := make([]byte, len(m.Categories)*10)
		var j8 int
		for _, num := range m.Categories {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContext(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Distance != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Distance))))
		i += 8
	}
	if m.Score != 0 {
		dAtA[i] = 0x79
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	return i, nil
}

func encodeVarintContext(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRecommendsRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserState != nil {
		l = m.UserState.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if m.CarState != nil {
		l = m.CarState.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovContext(uint64(m.Limit))
	}
	return n
}

func (m *GetRecommendsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Recommends) > 0 {
		for _, e := range m.Recommends {
			l = e.Size()
			n += 1 + l + sovContext(uint64(l))
		}
	}
	return n
}

func (m *UserState) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	return n
}

func (m *CarState) Size() (n int) {
	var l int
	_ = l
	l = len(m.CarId)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	if m.CurrentLocation != nil {
		l = m.CurrentLocation.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if m.FuelLevelPercentage != 0 {
		n += 5
	}
	if m.RangeM != 0 {
		n += 5
	}
	if m.NumberOfPassengers != 0 {
		n += 1 + sovContext(uint64(m.NumberOfPassengers))
	}
	if m.HeadingDeg != 0 {
		n += 5
	}
	if m.SpeedMph != 0 {
		n += 5
	}
	if m.IsInPark {
		n += 2
	}
	if m.IsSimulator {
		n += 2
	}
	return n
}

func (m *Coordinates) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Altitude != 0 {
		n += 9
	}
	if m.Accuracy != 0 {
		n += 9
	}
	if m.AltitudeAccuracy != 0 {
		n += 9
	}
	return n
}

func (m *GeoCoordinates) Size() (n int) {
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	l = len(m.AddressCountry)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	l = len(m.PostalCode)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	return n
}

func (m *PointOfInterest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovContext(uint64(l))
	}
	if len(m.Categories) > 0 {
		l = 0
		for _, e := range m.Categories {
			l += sovContext(uint64(e))
		}
		n += 1 + sovContext(uint64(l)) + l
	}
	if m.Distance != 0 {
		n += 9
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func sovContext(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContext(x uint64) (n int) {
	return sovContext(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRecommendsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecommendsRequest{`,
		`UserState:` + strings.Replace(fmt.Sprintf("%v", this.UserState), "UserState", "UserState", 1) + `,`,
		`CarState:` + strings.Replace(fmt.Sprintf("%v", this.CarState), "CarState", "CarState", 1) + `,`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "google_protobuf.Timestamp", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRecommendsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecommendsResponse{`,
		`Recommends:` + strings.Replace(fmt.Sprintf("%v", this.Recommends), "PointOfInterest", "PointOfInterest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserState{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarState{`,
		`CarId:` + fmt.Sprintf("%v", this.CarId) + `,`,
		`CurrentLocation:` + strings.Replace(fmt.Sprintf("%v", this.CurrentLocation), "Coordinates", "Coordinates", 1) + `,`,
		`Destination:` + strings.Replace(fmt.Sprintf("%v", this.Destination), "Coordinates", "Coordinates", 1) + `,`,
		`FuelLevelPercentage:` + fmt.Sprintf("%v", this.FuelLevelPercentage) + `,`,
		`RangeM:` + fmt.Sprintf("%v", this.RangeM) + `,`,
		`NumberOfPassengers:` + fmt.Sprintf("%v", this.NumberOfPassengers) + `,`,
		`HeadingDeg:` + fmt.Sprintf("%v", this.HeadingDeg) + `,`,
		`SpeedMph:` + fmt.Sprintf("%v", this.SpeedMph) + `,`,
		`IsInPark:` + fmt.Sprintf("%v", this.IsInPark) + `,`,
		`IsSimulator:` + fmt.Sprintf("%v", this.IsSimulator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Coordinates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Coordinates{`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`Altitude:` + fmt.Sprintf("%v", this.Altitude) + `,`,
		`Accuracy:` + fmt.Sprintf("%v", this.Accuracy) + `,`,
		`AltitudeAccuracy:` + fmt.Sprintf("%v", this.AltitudeAccuracy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoCoordinates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoCoordinates{`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Coordinates", "Coordinates", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`AddressCountry:` + fmt.Sprintf("%v", this.AddressCountry) + `,`,
		`PostalCode:` + fmt.Sprintf("%v", this.PostalCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PointOfInterest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PointOfInterest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "GeoCoordinates", "GeoCoordinates", 1) + `,`,
		`Categories:` + fmt.Sprintf("%v", this.Categories) + `,`,
		`Distance:` + fmt.Sprintf("%v", this.Distance) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringContext(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRecommendsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecommendsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecommendsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserState == nil {
				m.UserState = &UserState{}
			}
			if err := m.UserState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarState == nil {
				m.CarState = &CarState{}
			}
			if err := m.CarState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &google_protobuf.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecommendsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecommendsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecommendsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recommends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recommends = append(m.Recommends, &PointOfInterest{})
			if err := m.Recommends[len(m.Recommends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentLocation == nil {
				m.CurrentLocation = &Coordinates{}
			}
			if err := m.CurrentLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &Coordinates{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuelLevelPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FuelLevelPercentage = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeM", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RangeM = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPassengers", wireType)
			}
			m.NumberOfPassengers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPassengers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadingDeg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HeadingDeg = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedMph", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SpeedMph = float32(math.Float32frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInPark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInPark = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSimulator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSimulator = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coordinates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coordinates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coordinates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Altitude = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuracy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Accuracy = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltitudeAccuracy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AltitudeAccuracy = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoCoordinates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoCoordinates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoCoordinates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Coordinates{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointOfInterest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointOfInterest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointOfInterest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &GeoCoordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v PointOfInterest_Category
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContext
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (PointOfInterest_Category(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Categories = append(m.Categories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContext
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContext
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v PointOfInterest_Category
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContext
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (PointOfInterest_Category(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Categories = append(m.Categories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Distance = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContext(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContext
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContext
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContext
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContext(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContext = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContext   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("context.proto", fileDescriptorContext) }
func init() { golang_proto.RegisterFile("context.proto", fileDescriptorContext) }

var fileDescriptorContext = []byte{
	// 1128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0xb1, 0x63, 0x1f, 0xd3, 0xc4, 0x1a, 0x12, 0xba, 0x72, 0xcb, 0xc6, 0xb5, 0x50,
	0x15, 0x55, 0xd8, 0x6e, 0x03, 0xaa, 0x54, 0xca, 0x05, 0xae, 0x5b, 0x82, 0xfb, 0x13, 0x87, 0x75,
	0x2a, 0x5a, 0x6e, 0x56, 0x93, 0xdd, 0x93, 0xf5, 0xaa, 0xf6, 0xcc, 0x32, 0x33, 0x76, 0x9b, 0x3b,
	0xd4, 0x27, 0x40, 0xf0, 0x12, 0x48, 0x5c, 0xf0, 0x0a, 0xdc, 0x20, 0x55, 0x48, 0x48, 0x95, 0x10,
	0x12, 0x77, 0xa5, 0x2e, 0x17, 0x5c, 0xf6, 0x11, 0xd0, 0xce, 0xee, 0x3a, 0x4e, 0x0b, 0x15, 0xbe,
	0xf1, 0x9c, 0xf3, 0x7d, 0xdf, 0xd1, 0x39, 0xdf, 0xce, 0x0f, 0x9c, 0xf2, 0x04, 0xd7, 0xf8, 0x48,
	0xb7, 0x22, 0x29, 0xb4, 0xa0, 0x90, 0x85, 0xd3, 0x4b, 0xb5, 0xcd, 0x40, 0x88, 0x60, 0x84, 0x6d,
	0x83, 0x1c, 0x4c, 0x0e, 0xdb, 0x3a, 0x1c, 0xa3, 0xd2, 0x6c, 0x1c, 0x25, 0xe4, 0xda, 0xd9, 0x94,
	0xc0, 0xa2, 0xb0, 0xcd, 0x38, 0x17, 0x9a, 0xe9, 0x50, 0x70, 0x95, 0xa2, 0xef, 0x9b, 0x3f, 0xaf,
	0x19, 0x20, 0x6f, 0xaa, 0x87, 0x2c, 0x08, 0x50, 0xb6, 0x45, 0x64, 0x18, 0xff, 0xc2, 0xbe, 0x1c,
	0x84, 0x7a, 0x38, 0x39, 0x68, 0x79, 0x62, 0xdc, 0x1e, 0x3f, 0x0c, 0xf5, 0x03, 0xf1, 0xb0, 0x1d,
	0x88, 0xa6, 0x01, 0x9b, 0x53, 0x36, 0x0a, 0x7d, 0xa6, 0x85, 0x54, 0xed, 0xf9, 0x32, 0xd5, 0x35,
	0x17, 0x74, 0x81, 0x08, 0xc4, 0x71, 0xb7, 0x71, 0x64, 0x02, 0xb3, 0x4a, 0xe8, 0x8d, 0xdf, 0x09,
	0xac, 0xef, 0xa0, 0x76, 0xd0, 0x13, 0xe3, 0x31, 0x72, 0x5f, 0x39, 0xf8, 0xd5, 0x04, 0x95, 0xa6,
	0x1f, 0x02, 0x4c, 0x14, 0x4a, 0x57, 0x69, 0xa6, 0xd1, 0x22, 0x75, 0xb2, 0x55, 0xd9, 0xde, 0x68,
	0x1d, 0xbb, 0xd1, 0xba, 0xab, 0x50, 0x0e, 0x62, 0xd0, 0x29, 0x4f, 0xb2, 0x25, 0xbd, 0x02, 0x65,
	0x8f, 0x65, 0xa2, 0x9c, 0x11, 0xad, 0x2f, 0x8a, 0xba, 0x2c, 0x21, 0x5e, 0x2b, 0xce, 0x9e, 0x6d,
	0xe6, 0xea, 0xc4, 0x29, 0x79, 0x69, 0x86, 0x5e, 0x86, 0xe5, 0xd8, 0x4f, 0x2b, 0x6f, 0x54, 0xb5,
	0x56, 0xe2, 0x65, 0x2b, 0x6b, 0xbf, 0xb5, 0x9f, 0x99, 0x3d, 0xd7, 0x1a, 0x3e, 0x5d, 0x87, 0xc2,
	0x28, 0x1c, 0x87, 0xda, 0x82, 0x3a, 0xd9, 0x2a, 0x38, 0x49, 0xd0, 0xd8, 0x87, 0x8d, 0x57, 0xc6,
	0x52, 0x91, 0xe0, 0x0a, 0xe9, 0x55, 0x00, 0x39, 0xcf, 0x5a, 0xa4, 0x9e, 0xdf, 0xaa, 0x6c, 0x9f,
	0x59, 0x6c, 0x71, 0x4f, 0x84, 0x5c, 0xf7, 0x0f, 0x7b, 0x5c, 0xa3, 0x44, 0xa5, 0x9d, 0x05, 0x7a,
	0xa3, 0x0b, 0xe5, 0xf9, 0xd8, 0xf4, 0x34, 0xac, 0x18, 0x87, 0x42, 0xdf, 0xd8, 0x53, 0x76, 0x8a,
	0x71, 0xd8, 0xf3, 0xe9, 0xbb, 0x00, 0x0a, 0x95, 0x0a, 0x05, 0x8f, 0xb1, 0x9c, 0xc1, 0xca, 0x69,
	0xa6, 0xe7, 0x37, 0x7e, 0xcd, 0x43, 0x29, 0xf3, 0x81, 0x6e, 0x40, 0x31, 0x36, 0x6c, 0x5e, 0xa3,
	0xe0, 0xb1, 0xb8, 0xc4, 0x4d, 0xa8, 0x7a, 0x13, 0x29, 0x91, 0x6b, 0x77, 0x24, 0x3c, 0xb3, 0x31,
	0x52, 0x3b, 0x4f, 0x9f, 0xb0, 0x53, 0x08, 0xe9, 0x87, 0x9c, 0x69, 0x54, 0x73, 0x57, 0xd6, 0x52,
	0xe1, 0xed, 0x54, 0x47, 0xaf, 0x40, 0xc5, 0x47, 0xa5, 0x63, 0x5a, 0x5c, 0x26, 0xff, 0xc6, 0x32,
	0xce, 0x22, 0x97, 0xde, 0x84, 0x8d, 0xc3, 0x09, 0x8e, 0xdc, 0x11, 0x4e, 0x71, 0xe4, 0x46, 0x28,
	0x3d, 0xe4, 0x9a, 0x05, 0x68, 0x2d, 0xd7, 0xc9, 0x56, 0xee, 0xda, 0x3b, 0xb3, 0x67, 0x9b, 0xb4,
	0xb7, 0x94, 0xfe, 0x3e, 0x4f, 0xfe, 0xee, 0x7f, 0xe2, 0xbc, 0x1d, 0x8b, 0x6e, 0xc7, 0x9a, 0xbd,
	0xb9, 0x84, 0x9e, 0x87, 0x15, 0xc9, 0x78, 0x80, 0xee, 0xd8, 0x2a, 0x18, 0xf5, 0xa9, 0xd9, 0xb3,
	0xcd, 0xf2, 0x5c, 0xed, 0x14, 0x0d, 0x7a, 0x87, 0x5e, 0x84, 0x75, 0x3e, 0x19, 0x1f, 0xa0, 0x74,
	0xc5, 0xa1, 0x1b, 0x31, 0xa5, 0x90, 0x07, 0x28, 0x95, 0x55, 0x34, 0x9f, 0x97, 0x26, 0x58, 0xff,
	0x70, 0x6f, 0x8e, 0xd0, 0x4d, 0xa8, 0x0c, 0x91, 0xf9, 0x21, 0x0f, 0x5c, 0x1f, 0x03, 0x6b, 0x25,
	0xae, 0xee, 0x40, 0x9a, 0xba, 0x8e, 0x01, 0x3d, 0x03, 0x65, 0x15, 0x21, 0xfa, 0xee, 0x38, 0x1a,
	0x5a, 0x25, 0x03, 0x97, 0x4c, 0xe2, 0x4e, 0x34, 0xa4, 0x67, 0x01, 0x42, 0xe5, 0x86, 0xdc, 0x8d,
	0x98, 0x7c, 0x60, 0x95, 0xeb, 0x64, 0xab, 0xe4, 0x94, 0x42, 0xd5, 0xe3, 0x7b, 0x4c, 0x3e, 0xa0,
	0xe7, 0xe0, 0xad, 0x50, 0xb9, 0x2a, 0x1c, 0x4f, 0x46, 0xf1, 0x21, 0xb3, 0xd6, 0x0c, 0x5e, 0x09,
	0xd5, 0x20, 0x4b, 0x35, 0x7e, 0x20, 0x50, 0x59, 0x70, 0x90, 0xd6, 0xa0, 0x34, 0x62, 0x3a, 0xd4,
	0x13, 0x3f, 0x39, 0x37, 0xc4, 0x99, 0xc7, 0xf4, 0x2c, 0x94, 0x47, 0x82, 0x07, 0x09, 0x98, 0x33,
	0xe0, 0x71, 0x22, 0x56, 0xb2, 0x51, 0xaa, 0xcc, 0x27, 0xca, 0x2c, 0x36, 0x98, 0xe7, 0x4d, 0x24,
	0xf3, 0x8e, 0x8c, 0xfb, 0x31, 0x96, 0xc6, 0xf4, 0x02, 0x54, 0x33, 0x5e, 0x27, 0xe3, 0x14, 0x0c,
	0xe7, 0xb5, 0x7c, 0xe3, 0x47, 0x02, 0xab, 0x3b, 0x28, 0x16, 0x1b, 0xbe, 0x0a, 0xa5, 0xf9, 0x26,
	0x23, 0xff, 0x6f, 0x93, 0xcd, 0x05, 0xd4, 0x82, 0x15, 0xe6, 0xfb, 0x12, 0x95, 0x4a, 0x77, 0x7a,
	0x16, 0xd2, 0xf3, 0xb0, 0x9a, 0x2e, 0xbb, 0x62, 0xc2, 0xb5, 0x3c, 0x32, 0x33, 0x95, 0x9d, 0x57,
	0xb2, 0xd4, 0x06, 0x88, 0x84, 0xd2, 0x6c, 0xd4, 0x15, 0x7e, 0xb2, 0xb3, 0xca, 0xce, 0x42, 0xa6,
	0xf1, 0x73, 0x0e, 0xd6, 0x5e, 0x39, 0x94, 0x94, 0xc2, 0x32, 0x67, 0x63, 0x4c, 0x0f, 0x8d, 0x59,
	0xd3, 0x8f, 0xa1, 0xe2, 0x1d, 0xb7, 0x9a, 0x1e, 0x97, 0xda, 0xe2, 0x24, 0x27, 0xe7, 0x76, 0x16,
	0xe9, 0xf4, 0x3a, 0x80, 0xc7, 0x34, 0x06, 0x42, 0x86, 0xa8, 0xac, 0x7c, 0x3d, 0xbf, 0xb5, 0xba,
	0xfd, 0xde, 0x1b, 0xee, 0x85, 0x56, 0x37, 0x61, 0x1f, 0x39, 0x0b, 0xba, 0xf8, 0x2b, 0xf9, 0xa1,
	0xd2, 0x8c, 0x7b, 0x98, 0x7d, 0xa5, 0x2c, 0x8e, 0x2f, 0x2a, 0xe5, 0x09, 0x89, 0x66, 0x0f, 0x11,
	0x27, 0x09, 0x1a, 0xc3, 0xf8, 0x32, 0x48, 0x2a, 0xd1, 0x0a, 0xac, 0xdc, 0xdd, 0xbd, 0xb5, 0xdb,
	0xff, 0x62, 0xb7, 0xba, 0x44, 0xd7, 0xa0, 0xb2, 0xd3, 0x19, 0xb8, 0x83, 0xfd, 0xce, 0x7e, 0xaf,
	0xbf, 0x5b, 0x25, 0x31, 0xba, 0xd7, 0x71, 0x6e, 0xf5, 0x76, 0x77, 0xaa, 0x39, 0x0a, 0x50, 0x1c,
	0x74, 0x3f, 0xeb, 0xf7, 0x6f, 0x57, 0xf3, 0x31, 0xb0, 0xe3, 0xf4, 0xbb, 0x37, 0x9c, 0xfb, 0xd5,
	0x65, 0x5a, 0x82, 0xe5, 0x6e, 0xe7, 0xd3, 0x1b, 0xd5, 0x02, 0x5d, 0x05, 0x70, 0x6e, 0x0c, 0xf6,
	0x3b, 0x77, 0x9d, 0xce, 0xee, 0x7e, 0xb5, 0xb8, 0xfd, 0x98, 0xc0, 0x6a, 0x37, 0x99, 0x67, 0x80,
	0x72, 0x1a, 0x7a, 0x48, 0x23, 0x38, 0x75, 0xe2, 0x96, 0xa4, 0xf5, 0x93, 0x76, 0xbd, 0xfe, 0x2e,
	0xd4, 0xce, 0xbd, 0x81, 0x91, 0x5c, 0xb1, 0x8d, 0xda, 0xe3, 0xdf, 0xfe, 0xfa, 0x2e, 0xb7, 0x4e,
	0xa9, 0x79, 0x08, 0xa7, 0x97, 0xda, 0xc7, 0x37, 0xe8, 0xb5, 0x5f, 0xc8, 0xb7, 0x1d, 0x9f, 0x16,
	0xb6, 0xf3, 0x97, 0x5a, 0x17, 0x2f, 0x90, 0x9c, 0xbc, 0x07, 0x8d, 0xbd, 0xe1, 0x91, 0x42, 0x8d,
	0xb2, 0x9e, 0x36, 0x57, 0x8f, 0xbb, 0x43, 0x59, 0x97, 0x18, 0x09, 0x15, 0xea, 0xd8, 0x98, 0xed,
	0xa1, 0xd6, 0x91, 0xfa, 0xa8, 0xdd, 0x5e, 0x78, 0xdc, 0xee, 0xe1, 0x54, 0xf4, 0xb8, 0xd7, 0x8e,
	0x52, 0x79, 0x33, 0xed, 0xab, 0xa9, 0x8c, 0xfc, 0xe9, 0x73, 0x7b, 0xe9, 0x8f, 0xe7, 0xf6, 0xd2,
	0xcb, 0xe7, 0x36, 0xf9, 0x7a, 0x66, 0x93, 0xef, 0x67, 0x36, 0x79, 0x32, 0xb3, 0xc9, 0xd3, 0x99,
	0x4d, 0xfe, 0x9c, 0xd9, 0xe4, 0xef, 0x99, 0xbd, 0xf4, 0x72, 0x66, 0x93, 0x6f, 0x5e, 0xd8, 0x4b,
	0x3f, 0xbd, 0xb0, 0xc9, 0x93, 0x17, 0x36, 0xf9, 0xb2, 0xf9, 0x08, 0xa7, 0xe2, 0xbf, 0x2a, 0x26,
	0x2f, 0xe9, 0xd5, 0xe3, 0xf1, 0x0f, 0x8a, 0x26, 0xf3, 0xc1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x85, 0x04, 0xf1, 0xe2, 0x34, 0x08, 0x00, 0x00,
}
